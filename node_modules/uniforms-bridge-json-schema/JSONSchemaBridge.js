"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var cloneDeep_1 = tslib_1.__importDefault(require("lodash/cloneDeep"));
var get_1 = tslib_1.__importDefault(require("lodash/get"));
var invariant_1 = tslib_1.__importDefault(require("invariant"));
var lowerCase_1 = tslib_1.__importDefault(require("lodash/lowerCase"));
var omit_1 = tslib_1.__importDefault(require("lodash/omit"));
var upperFirst_1 = tslib_1.__importDefault(require("lodash/upperFirst"));
var uniforms_1 = require("uniforms");
var resolveRef = function (referance, schema) {
    invariant_1.default(referance.startsWith('#'), 'Reference is not an internal reference, and only such are allowed: "%s"', referance);
    var resolvedReference = referance
        .split('/')
        .filter(function (part) { return part && part !== '#'; })
        .reduce(function (definition, next) { return definition[next]; }, schema);
    invariant_1.default(resolvedReference, 'Reference not found in schema: "%s"', referance);
    return resolvedReference;
};
var distinctSchema = function (schema) {
    if (schema.type === 'object') {
        return schema;
    }
    if (schema.$ref) {
        return tslib_1.__assign(tslib_1.__assign({}, schema), resolveRef(schema.$ref, schema));
    }
    return schema;
};
var extractValue = function () {
    var xs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        xs[_i] = arguments[_i];
    }
    return xs.reduce(function (x, y) {
        return x === false || x === null ? '' : x !== true && x !== undefined ? x : y;
    });
};
var pathToName = function (path) {
    if (path[0] === '.')
        path = path
            .replace(/\['(.+?)'\]/g, '.$1')
            .replace(/\[(.+?)\]/g, '.$1')
            .replace(/\\'/g, "'");
    else
        path = path
            .replace(/\//g, '.')
            .replace(/~0/g, '~')
            .replace(/~1/g, '/');
    return path.slice(1);
};
var toHumanLabel = function (label) { return upperFirst_1.default(lowerCase_1.default(label)); };
var JSONSchemaBridge = /** @class */ (function (_super) {
    tslib_1.__extends(JSONSchemaBridge, _super);
    function JSONSchemaBridge(schema, validator) {
        var _this = _super.call(this) || this;
        _this.schema = distinctSchema(schema);
        _this._compiledSchema = {};
        _this.validator = validator;
        return _this;
    }
    JSONSchemaBridge.check = function () {
        return false;
    };
    JSONSchemaBridge.prototype.getError = function (name, error) {
        var nameParts = uniforms_1.joinName(null, name);
        var rootName = uniforms_1.joinName(nameParts.slice(0, -1));
        var baseName = nameParts[nameParts.length - 1];
        return (error &&
            error.details &&
            error.details.find &&
            error.details.find(function (detail) {
                var path = pathToName(detail.dataPath);
                return (name === path ||
                    (rootName === path && baseName === detail.params.missingProperty));
            }));
    };
    JSONSchemaBridge.prototype.getErrorMessage = function (name, error) {
        var scopedError = this.getError(name, error) || {};
        return (scopedError && scopedError.message) || '';
    };
    JSONSchemaBridge.prototype.getErrorMessages = function (error) {
        if (error) {
            if (Array.isArray(error.details)) {
                return error.details.reduce(function (acc, _a) {
                    var message = _a.message;
                    return acc.concat(message);
                }, []);
            }
            return [error.message || error];
        }
        return [];
    };
    JSONSchemaBridge.prototype.getField = function (name) {
        var _this = this;
        return uniforms_1.joinName(null, name).reduce(function (definition, next, nextIndex, array) {
            var previous = uniforms_1.joinName(array.slice(0, nextIndex));
            var isRequired = (definition.required ||
                (_this._compiledSchema[previous] || {}).required ||
                []).includes(next);
            var _key = uniforms_1.joinName(previous, next);
            var _definition = _this._compiledSchema[_key] || {};
            if (next === '$' || next === '' + parseInt(next, 10)) {
                invariant_1.default(definition.type === 'array', 'Field not found in schema: "%s"', name);
                definition = Array.isArray(definition.items)
                    ? definition.items[parseInt(next, 10)]
                    : definition.items;
            }
            else if (definition.type === 'object') {
                invariant_1.default(definition.properties, 'Field properties not found in schema: "%s"', name);
                definition = definition.properties[next];
            }
            else {
                var _a = [
                    'allOf',
                    'anyOf',
                    'oneOf',
                ]
                    .filter(function (key) { return definition[key]; })
                    .map(function (key) {
                    return definition[key].find(function (_a) {
                        var _b = _a.properties, properties = _b === void 0 ? {} : _b;
                        return properties[next];
                    });
                })[0], _b = (_a === void 0 ? {} : _a).properties, combinedDefinition = _b === void 0 ? {} : _b;
                definition = combinedDefinition[next];
            }
            invariant_1.default(definition, 'Field not found in schema: "%s"', name);
            if (definition.$ref) {
                definition = resolveRef(definition.$ref, _this.schema);
            }
            ['allOf', 'anyOf', 'oneOf']
                .filter(function (key) { return definition[key]; })
                .forEach(function (key) {
                _definition[key] = definition[key].map(function (def) {
                    return def.$ref ? resolveRef(def.$ref, _this.schema) : def;
                });
            });
            // Naive computation of combined type, properties and required
            if (['allOf', 'anyOf', 'oneOf'].filter(function (key) { return definition[key]; }).length) {
                _definition.type = ([]
                    .concat(_definition.allOf, _definition.anyOf, _definition.oneOf)
                    .filter(function (def) { return def; })
                    .find(function (def) { return def.type; }) || {}).type;
                var _c = []
                    .concat(_definition.allOf, _definition.anyOf, _definition.oneOf)
                    .filter(function (def) { return def; })
                    .reduce(function (_a, _b) {
                    var _properties = _a[0], _required = _a[1];
                    var properties = _b.properties, required = _b.required;
                    return [
                        Object.assign(_properties, properties),
                        _required.concat(required),
                    ];
                }, [{}, []]), properties = _c[0], required = _c[1];
                _definition.properties = properties;
                _definition.required = required;
            }
            _this._compiledSchema[_key] = Object.assign(_definition, { isRequired: isRequired });
            return definition;
        }, this.schema);
    };
    JSONSchemaBridge.prototype.getInitialValue = function (name, props) {
        if (props === void 0) { props = {}; }
        var _a = this.getField(name), _default = _a.default, _type = _a.type;
        var _b = this._compiledSchema[name], _c = _b.default, defaultValue = _c === void 0 ? _default !== undefined
            ? _default
            : get_1.default(this.schema.default, name) : _c, _d = _b.type, type = _d === void 0 ? _type : _d;
        if (defaultValue !== undefined)
            return cloneDeep_1.default(defaultValue);
        if (type === 'array') {
            var item = this.getInitialValue(uniforms_1.joinName(name, '0'));
            var items = props.initialCount || 0;
            return Array(items).fill(item);
        }
        if (type === 'object')
            return {};
        return undefined;
    };
    JSONSchemaBridge.prototype.getProps = function (name, props) {
        if (props === void 0) { props = {}; }
        var _a = this.getField(name), uniforms = _a.uniforms, field = tslib_1.__rest(_a, ["uniforms"]);
        var _b = omit_1.default(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, field), uniforms), this._compiledSchema[name]), ['default', 'format', 'type']), enum_ = _b.enum, isRequired = _b.isRequired, title = _b.title, ready = tslib_1.__rest(_b, ["enum", "isRequired", "title"]);
        if (enum_)
            ready.allowedValues = enum_;
        if (field.type === 'number')
            ready.decimal = true;
        if (uniforms && uniforms.type !== undefined)
            ready.type = uniforms.type;
        if (ready.required === undefined)
            ready.required = isRequired;
        ready.label = extractValue(ready.label, title, toHumanLabel(uniforms_1.joinName(null, name).slice(-1)[0]));
        var options = props.options || ready.options;
        if (options) {
            if (!Array.isArray(options)) {
                ready.transform = function (value) { return options[value]; };
                ready.allowedValues = Object.keys(options);
            }
            else {
                ready.transform = function (value) {
                    return options.find(function (option) { return option.value === value; }).label;
                };
                ready.allowedValues = options.map(function (option) { return option.value; });
            }
        }
        return ready;
    };
    JSONSchemaBridge.prototype.getSubfields = function (name) {
        if (!name) {
            if (this.schema.properties) {
                return Object.keys(this.schema.properties);
            }
            return [];
        }
        var _a = this.getField(name), _type = _a.type, _properties = _a.properties;
        var _b = this._compiledSchema[name], _c = _b.type, fieldType = _c === void 0 ? _type : _c, _d = _b.properties, fieldProperties = _d === void 0 ? _properties : _d;
        if (fieldType === 'object') {
            return Object.keys(fieldProperties);
        }
        return [];
    };
    JSONSchemaBridge.prototype.getType = function (name) {
        var _a = this.getField(name), _type = _a.type, fieldFormat = _a.format;
        var _b = this._compiledSchema[name].type, fieldType = _b === void 0 ? _type : _b;
        if (fieldFormat === 'date-time')
            return Date;
        if (fieldType === 'string')
            return String;
        if (fieldType === 'number')
            return Number;
        if (fieldType === 'integer')
            return Number;
        if (fieldType === 'object')
            return Object;
        if (fieldType === 'array')
            return Array;
        if (fieldType === 'boolean')
            return Boolean;
        invariant_1.default(fieldType !== 'null', 'Field "%s" can not be represented as a type null', name);
        return fieldType;
    };
    JSONSchemaBridge.prototype.getValidator = function () {
        return this.validator;
    };
    return JSONSchemaBridge;
}(uniforms_1.Bridge));
exports.default = JSONSchemaBridge;
