import { __rest } from "tslib";
import React, { Children } from 'react';
import classnames from 'classnames';
import { connectField, filterDOMProps, joinName } from 'uniforms';
import ListItemField from './ListItemField';
import ListAddField from './ListAddField';
const List = (_a) => {
    var { addIcon, children, className, error, errorMessage, initialCount, itemProps, label, name, removeIcon, showInlineError, value } = _a, props = __rest(_a, ["addIcon", "children", "className", "error", "errorMessage", "initialCount", "itemProps", "label", "name", "removeIcon", "showInlineError", "value"]);
    return (React.createElement("div", Object.assign({ className: classnames('panel panel-default', { 'panel-danger': error }, className) }, filterDOMProps(props)),
        React.createElement("div", { className: "panel-body" },
            label && (React.createElement("div", { className: classnames('panel-heading', { 'has-error': error }) },
                React.createElement("label", { className: "control-label" },
                    label,
                    "\u00A0"),
                React.createElement(ListAddField, { name: `${name}.$`, initialCount: initialCount, addIcon: addIcon }),
                !!(error && showInlineError) && (React.createElement("span", { className: "help-block" }, errorMessage)))),
            children
                ? value.map((item, index) => Children.map(children, child => React.cloneElement(child, {
                    key: index,
                    label: null,
                    name: joinName(name, child.props.name && child.props.name.replace('$', index)),
                    removeIcon,
                })))
                : value.map((item, index) => (React.createElement(ListItemField, Object.assign({ key: index, label: null, name: joinName(name, index), removeIcon: removeIcon }, itemProps)))))));
};
export default connectField(List, {
    ensureValue: false,
    includeInChain: false,
});
