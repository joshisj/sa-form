import { __rest } from "tslib";
import React from 'react';
import classnames from 'classnames';
import { connectField, filterDOMProps, injectName, joinName } from 'uniforms';
import AutoField from './AutoField';
const Nest = (_a) => {
    var { children, className, error, errorMessage, fields, itemProps, label, name, showInlineError } = _a, props = __rest(_a, ["children", "className", "error", "errorMessage", "fields", "itemProps", "label", "name", "showInlineError"]);
    return (React.createElement("div", Object.assign({ className: classnames(className, { 'has-error': error }) }, filterDOMProps(props)),
        label && React.createElement("label", null, label),
        !!(error && showInlineError) && (React.createElement("span", { className: "help-block" }, errorMessage)),
        children
            ? injectName(name, children)
            : fields.map((key) => (React.createElement(AutoField, Object.assign({ key: key, name: joinName(name, key) }, itemProps))))));
};
export default connectField(Nest, {
    ensureValue: false,
    includeInChain: false,
});
