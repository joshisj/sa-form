"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var omit_1 = tslib_1.__importDefault(require("lodash/omit"));
var uniforms_1 = require("uniforms");
var gridClassName_1 = tslib_1.__importDefault(require("./gridClassName"));
// eslint-disable-next-line complexity
function wrapField(_a, children) {
    var className = _a.className, disabled = _a.disabled, error = _a.error, errorMessage = _a.errorMessage, feedbackable = _a.feedbackable, // Only some input types support feedback icons.
    grid = _a.grid, // Grid is either an number between 1 and 11 or an object with keys like xs and md.
    help = _a.help, // Help text.
    helpClassName = _a.helpClassName, // Help text class name.
    id = _a.id, label = _a.label, labelClassName = _a.labelClassName, // Label class name (String|Array[String]).
    required = _a.required, showInlineError = _a.showInlineError, // Show inline error message?
    wrapClassName = _a.wrapClassName, // Input wrapper class name.
    props = tslib_1.__rest(_a, ["className", "disabled", "error", "errorMessage", "feedbackable", "grid", "help", "helpClassName", "id", "label", "labelClassName", "required", "showInlineError", "wrapClassName"]);
    var hasWrap = !!(grid || wrapClassName);
    var blockError = !!(error && showInlineError) && (react_1.default.createElement("span", { className: "help-block" }, errorMessage));
    var blockFeedback = !!(error && feedbackable) && (react_1.default.createElement("i", { className: "glyphicon glyphicon-remove form-control-feedback" }));
    var blockHelp = !!help && (react_1.default.createElement("span", { className: classnames_1.default('help-block', helpClassName) }, help));
    return (react_1.default.createElement("div", tslib_1.__assign({ className: classnames_1.default(className, 'field', 'form-group', {
            'has-feedback': error && feedbackable,
            'has-error': error,
            disabled: disabled,
            required: required,
        }) }, uniforms_1.filterDOMProps(omit_1.default(props, [
        'checkboxes',
        'inline',
        'inputClassName',
        'inputRef',
        'rows',
        'transform',
    ]))),
        label && (react_1.default.createElement("label", { htmlFor: id, className: classnames_1.default('control-label', gridClassName_1.default(grid, 'label'), labelClassName) }, label)),
        hasWrap && (react_1.default.createElement("div", { className: classnames_1.default(wrapClassName, gridClassName_1.default(grid, 'input')) },
            children,
            blockFeedback,
            blockHelp,
            blockError)),
        !hasWrap && children,
        !hasWrap && blockFeedback,
        !hasWrap && blockHelp,
        !hasWrap && blockError));
}
exports.default = wrapField;
