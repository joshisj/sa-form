"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var graphql = tslib_1.__importStar(require("graphql"));
var invariant_1 = tslib_1.__importDefault(require("invariant"));
var lowerCase_1 = tslib_1.__importDefault(require("lodash/lowerCase"));
var upperFirst_1 = tslib_1.__importDefault(require("lodash/upperFirst"));
var uniforms_1 = require("uniforms");
var extractValue = function () {
    var xs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        xs[_i] = arguments[_i];
    }
    return xs.reduce(function (x, y) {
        return x === false || x === null ? '' : x !== true && x !== undefined ? x : y;
    });
};
var extractFromNonNull = function (x) {
    return x && x.type instanceof graphql.GraphQLNonNull
        ? tslib_1.__assign(tslib_1.__assign({}, x), { type: x.type.ofType }) : x;
};
var toHumanLabel = function (label) { return upperFirst_1.default(lowerCase_1.default(label)); };
var GraphQLBridge = /** @class */ (function (_super) {
    tslib_1.__extends(GraphQLBridge, _super);
    function GraphQLBridge(schema, validator, extras) {
        if (extras === void 0) { extras = {}; }
        var _this = _super.call(this) || this;
        _this.extras = extras;
        _this.schema = schema;
        _this.validator = validator;
        return _this;
    }
    // This bridge has 3 arguments, so it cannot be constructed implicite in the
    // createSchemaBridge.
    GraphQLBridge.check = function ( /* schema */) {
        return false;
    };
    GraphQLBridge.prototype.getError = function (name, error) {
        return ((error &&
            error.details &&
            error.details.find &&
            error.details.find(function (error) { return error.name === name; })) ||
            null);
    };
    GraphQLBridge.prototype.getErrorMessage = function (name, error) {
        var scopedError = this.getError(name, error);
        return !scopedError ? '' : scopedError.message;
    };
    GraphQLBridge.prototype.getErrorMessages = function (error) {
        if (error) {
            if (Array.isArray(error.details)) {
                return error.details.map(function (error) { return error.message; });
            }
            if (error.message) {
                return [error.message];
            }
        }
        if (error !== undefined) {
            return [error];
        }
        return [];
    };
    GraphQLBridge.prototype.getField = function (name, returnExtracted) {
        if (returnExtracted === void 0) { returnExtracted = true; }
        return uniforms_1.joinName(null, name).reduce(function (definition, next, index, array) {
            if (next === '$' || next === '' + parseInt(next, 10)) {
                invariant_1.default(definition.type instanceof graphql.GraphQLList, 'Field not found in schema: "%s"', name);
                definition = { type: extractFromNonNull(definition.type.ofType) };
            }
            else if (definition.type && definition.type._fields) {
                definition = definition.type._fields[next];
            }
            else {
                definition = definition[next];
            }
            invariant_1.default(definition, 'Field not found in schema: "%s"', name);
            var isLast = array.length - 1 === index;
            if (isLast && !returnExtracted) {
                return definition;
            }
            var extracted = extractFromNonNull(definition);
            if ((isLast && returnExtracted) ||
                !(extracted.type instanceof graphql.GraphQLObjectType)) {
                return extracted;
            }
            invariant_1.default(extracted.type.getFields, 'Field not found in schema: "%s"', name);
            return extracted.type.getFields();
        }, this.schema.getFields());
    };
    GraphQLBridge.prototype.getInitialValue = function (name, props) {
        if (props === void 0) { props = {}; }
        var type = this.getType(name);
        if (type === Array) {
            var item_1 = this.getInitialValue(uniforms_1.joinName(name, '0'));
            var items = props.initialCount || 0;
            return Array.from({ length: items }, function () { return item_1; });
        }
        if (type === Object) {
            return {};
        }
        var defaultValue = this.getField(name).defaultValue;
        return defaultValue === undefined
            ? this.extras[name] && this.extras[name].initialValue
            : defaultValue;
    };
    // eslint-disable-next-line complexity
    GraphQLBridge.prototype.getProps = function (nameNormal, props) {
        if (props === void 0) { props = {}; }
        var nameGeneric = nameNormal.replace(/\.\d+/g, '.$');
        var field = this.getField(nameGeneric, false);
        var fieldType = extractFromNonNull(field).type;
        var ready = tslib_1.__assign(tslib_1.__assign({ required: field.type instanceof graphql.GraphQLNonNull }, this.extras[nameGeneric]), this.extras[nameNormal]);
        if (fieldType instanceof graphql.GraphQLScalarType &&
            fieldType.name === 'Float') {
            ready.decimal = true;
        }
        ready.label = extractValue(ready.label, toHumanLabel(field.name));
        var options = props.options || ready.options;
        if (options) {
            if (!Array.isArray(options)) {
                ready.transform = function (value) { return options[value]; };
                ready.allowedValues = Object.keys(options);
            }
            else {
                ready.transform = function (value) {
                    return options.find(function (option) { return option.value === value; }).label;
                };
                ready.allowedValues = options.map(function (option) { return option.value; });
            }
        }
        return ready;
    };
    GraphQLBridge.prototype.getSubfields = function (name) {
        if (!name) {
            return Object.keys(this.schema.getFields());
        }
        var fieldType = this.getField(name).type;
        if (fieldType instanceof graphql.GraphQLObjectType ||
            fieldType instanceof graphql.GraphQLInputObjectType) {
            return Object.keys(fieldType.getFields());
        }
        return [];
    };
    GraphQLBridge.prototype.getType = function (name) {
        var fieldType = this.getField(name).type;
        if (fieldType instanceof graphql.GraphQLList)
            return Array;
        if (fieldType instanceof graphql.GraphQLObjectType)
            return Object;
        if (fieldType instanceof graphql.GraphQLInputObjectType)
            return Object;
        if (fieldType instanceof graphql.GraphQLScalarType) {
            if (fieldType.name === 'ID')
                return String;
            if (fieldType.name === 'Int')
                return Number;
            if (fieldType.name === 'Float')
                return Number;
            if (fieldType.name === 'String')
                return String;
            if (fieldType.name === 'Boolean')
                return Boolean;
        }
        return fieldType;
    };
    GraphQLBridge.prototype.getValidator = function ( /* options */) {
        return this.validator;
    };
    return GraphQLBridge;
}(uniforms_1.Bridge));
exports.default = GraphQLBridge;
