import get from 'lodash/get';
import mapValues from 'lodash/mapValues';
import { useCallback, useEffect, useMemo } from 'react';
import joinName from './joinName';
import useForm from './useForm';
function propagate(prop, schema, state, fallback) {
    const schemaDisabled = schema === false || schema === '';
    const schemaValue = typeof schema === 'string' ? schema : schemaDisabled ? '' : fallback;
    const resultValue = typeof prop === 'string'
        ? prop
        : prop === false || (prop === undefined && !state) || schemaDisabled
            ? ''
            : schemaValue;
    return [resultValue, schemaValue];
}
export default function useField(fieldName, props, options) {
    var _a, _b;
    const context = useForm();
    const name = joinName(context.name, fieldName);
    const state = mapValues(context.state, (prev, key) => {
        const next = props[key];
        return next === null || next === undefined ? prev : !!next;
    });
    const changed = !!get(context.changedMap, name);
    const error = context.schema.getError(name, context.error);
    const errorMessage = context.schema.getErrorMessage(name, context.error);
    const field = context.schema.getField(name);
    const fieldType = context.schema.getType(name);
    const fields = context.schema.getSubfields(name);
    const schemaProps = context.schema.getProps(name, Object.assign(Object.assign({}, state), props));
    const [label, labelFallback] = propagate(props.label, schemaProps.label, state.label, '');
    const [placeholder] = propagate(props.placeholder, schemaProps.placeholder, state.placeholder, label || labelFallback);
    const id = useMemo(() => context.randomId(), []);
    const onChange = useCallback((value, key = name) => {
        context.onChange(key, value);
    }, [context.onChange, name]);
    let value = (_a = props.value) !== null && _a !== void 0 ? _a : get(context.model, name);
    if ((options === null || options === void 0 ? void 0 : options.initialValue) !== false) {
        let initialValue;
        if (((_b = schemaProps.required) !== null && _b !== void 0 ? _b : props.required) && value === undefined) {
            value = context.schema.getInitialValue(name, props);
            initialValue = value;
        }
        else if (props.value !== undefined && props.value !== value) {
            initialValue = props.value;
        }
        useEffect(() => {
            if (initialValue !== undefined)
                onChange(initialValue);
        }, []);
    }
    const fieldProps = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ id }, state), { changed,
        error,
        errorMessage,
        field,
        fieldType,
        fields,
        onChange,
        value }), schemaProps), props), { label,
        name,
        placeholder });
    return [fieldProps, context];
}
